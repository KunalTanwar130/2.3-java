import java.util.*;
import java.util.stream.*;
import java.util.Map.Entry;

class Product {
    String name;
    String category;
    double price;

    public Product(String name, String category, double price) {
        this.name = name;
        this.category = category;
        this.price = price;
    }

    public String toString() {
        return name + " (" + category + "): ₹" + price;
    }
}

public class ProductStreamOperations {
    public static void main(String[] args) {
        List<Product> products = Arrays.asList(
                new Product("Laptop", "Electronics", 75000),
                new Product("Phone", "Electronics", 55000),
                new Product("Table", "Furniture", 15000),
                new Product("Chair", "Furniture", 7000),
                new Product("Shoes", "Fashion", 4000),
                new Product("Jacket", "Fashion", 6000)
        );

        // 1️⃣ Grouping by Category
        System.out.println("Grouped by Category:");
        Map<String, List<Product>> grouped = products.stream()
                .collect(Collectors.groupingBy(p -> p.category));
        grouped.forEach((cat, list) -> {
            System.out.println(cat + " → " + list);
        });

        // 2️⃣ Maximum Price per Category
        System.out.println("\nMaximum Price per Category:");
        Map<String, Optional<Product>> maxPrice = products.stream()
                .collect(Collectors.groupingBy(
                        p -> p.category,
                        Collectors.maxBy(Comparator.comparingDouble(p -> p.price))
                ));
        maxPrice.forEach((cat, prod) ->
                System.out.println(cat + " → " + prod.get().name + " (₹" + prod.get().price + ")"));

        // 3️⃣ Average Price per Category
        System.out.println("\nAverage Price per Category:");
        Map<String, Double> avgPrice = products.stream()
                .collect(Collectors.groupingBy(
                        p -> p.category,
                        Collectors.averagingDouble(p -> p.price)
                ));
        avgPrice.forEach((cat, avg) ->
                System.out.println(cat + " → ₹" + String.format("%.2f", avg)));
    }
}
